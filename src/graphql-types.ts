/* tslint:disable */
/* eslint-disable */
import { GraphQLResolveInfo, GraphQLScalarType } from 'graphql';
/**
 * This file is auto-generated by graphql-schema-typescript
 * Please note that any changes in this file may be overwritten
 */
 

/*******************************
 *                             *
 *          TYPE DEFS          *
 *                             *
 *******************************/
export interface GQLQuery {
  backendConfig?: GQLBackendConfig;
  url?: GQLUrl;
  blogPost?: GQLBlogPost;
  blogPosts?: GQLBlogPostListing;
  menu?: Array<GQLMenuItem | null>;
  category?: GQLCategory;
  product?: GQLProduct;
  products?: GQLProductList;
  cart?: GQLCart;
  countries?: GQLCountryList;
  contactUs?: GQLContactUs;
  order?: GQLOrder;
  lastOrder?: GQLOrder;
  orders?: GQLOrders;
  address?: GQLAddress;
  addresses?: GQLAddressList;
  customer?: GQLCustomer;
  cmsPage?: GQLCmsPage;
  cmsBlock?: GQLCmsBlock;
  validatePasswordToken?: boolean;
  page?: GQLPage;
  routingConfig?: Array<GQLRoutingConfig | null>;
  devGenComponent?: string;
}

export interface GQLBackendConfig {
  locales?: Array<string | null>;
  activeLocale?: string;
  blog?: GQLBlogConfig;
  shop?: GQLShopConfig;
}

export interface GQLBlogConfig {
  _?: boolean;
}

export interface GQLShopConfig {
  activeCurrency?: string;
  activeStore?: string;
  currencies?: Array<string | null>;
  baseCurrency?: string;
  stores?: Array<GQLShopStoreEntry | null>;
  timezone?: string;
  weightUnit?: string;
}

export interface GQLShopStoreEntry {
  name?: string;
  code?: string;
}

export interface GQLUrl {
  id: string;
  path: string;
  type: string;
  redirect?: boolean;
}

export interface GQLBlogPost {
  id: number;
  date?: string;
  modified?: string;
  title?: string;
  content?: string;
  excerpt?: string;
  slug?: string;
  status?: string;
  image?: GQLBlogPostImage;
  related?: GQLBlogPostListing;
}

export interface GQLBlogPostImage {
  url?: string;
  description?: string;
}

export interface GQLBlogPostListing {
  items?: Array<GQLBlogPost | null>;
  pagination?: GQLPagination;
}

export interface GQLPagination {
  totalPages: number;
  totalItems: number;
  perPage: number;
  currentPage: number;
  nextPage?: number;
  prevPage?: number;
}

export interface GQLBlogPageQuery {
  category?: string;
}

export interface GQLPaginationInput {
  page?: number;
  perPage?: number;
}

export interface GQLMenuItem {
  id: string;
  name: string;
  urlPath: string;
  cssClass?: string;
  children: Array<GQLMenuItem | null>;
  images?: Array<GQLItemsCarousel | null>;
}

export interface GQLItemsCarousel {
  media: GQLMedia;
  urlPath?: string;
  text?: string;
}

export interface GQLMedia {
  type: string;
  url: string;
}

export interface GQLCategory {
  id: string;
  name?: string;
  children?: Array<GQLCategory | null>;
  description?: string;
  breadcrumbs?: Array<GQLBreadcrumb | null>;
  products?: GQLProductList;
}

export interface GQLBreadcrumb {
  name?: string;
  urlPath?: string;
}

export interface GQLSortOrderInput {
  field: string;
  direction?: GQLSortOrderDirection;
}

export enum GQLSortOrderDirection {
  asc = 'asc',
  desc = 'desc'
}

export interface GQLFilterInput {
  field?: string;
  value?: Array<string | null>;
  operator?: GQLFilterOperator;
}

export enum GQLFilterOperator {
  eq = 'eq',
  neq = 'neq',
  lt = 'lt',
  lte = 'lte',
  gt = 'gt',
  gte = 'gte',
  in = 'in',
  nin = 'nin',
  range = 'range'
}

export interface GQLProductList {
  items: Array<GQLProduct | null>;
  aggregations?: Array<GQLAggregation | null>;
  pagination?: GQLPagination;
  breadcrumbs?: Array<GQLBreadCrumb | null>;
  subCategories?: Array<GQLSubCategory | null>;
}

export interface GQLProduct {
  id: string;
  sku: string;
  name: string;
  image?: string;
  urlPath: string;
  thumbnail?: string;
  price: GQLProductPrice;
  tierPrices?: Array<GQLProductTierPrice | null>;
  currency?: string;
  formattedPrice?: string;
  previousFormattedPrice?: string;
  ean?: string;
  packageUnit?: string;
  description?: string;
  instructions?: string;
  ingridients?: string;
  stock?: GQLStock;
  type?: string;
  attributes?: Array<GQLProductAttribute | null>;
  configurableOptions?: Array<GQLConfigurableProductOption | null>;
  bundleOptions?: Array<GQLBundleProductOption | null>;
  gallery?: Array<GQLGalleryEntry | null>;
  breadcrumbs?: Array<GQLBreadcrumb | null>;
  seo?: GQLProductSeo;
}

export interface GQLProductPrice {
  regular: number;
  special?: number;
  minTier?: number;
}

export interface GQLProductTierPrice {
  qty: number;
  value: number;
  discount: number;
}

export interface GQLStock {
  isInStock?: boolean;
  qty: number;
}

export interface GQLProductAttribute {
  name: string;
  value?: string;
}

export interface GQLConfigurableProductOption {
  id: string;
  attributeId: string;
  label?: string;
  position?: string;
  productId: string;
  values: Array<GQLConfigurableProductOptionValue | null>;
}

export interface GQLConfigurableProductOptionValue {
  inStock: GQLStock;
  price: GQLProductPrice;
  label?: string;
  valueIndex: string;
  previousFormattedPrice?: string;
  formattedPrice?: string;
  ean?: string;
  packageUnit?: string;
}

export interface GQLBundleProductOption {
  optionId?: number;
  position?: number;
  productLinks?: Array<GQLBundleProductOptionLink | null>;
  required?: boolean;
  sku?: string;
  title?: string;
  type?: string;
}

export interface GQLBundleProductOptionLink {
  canChangeQuantity?: number;
  name?: string;
  catalogDisplayPrice?: string;
  id?: string;
  isDefault?: boolean;
  optionId?: number;
  position?: number;
  price?: string;
  priceType?: string;
  qty?: number;
  sku?: string;
}

export interface GQLGalleryEntry {
  type: string;
  full: string;
  thumbnail?: string;
  embedUrl?: string;
  format?: string;
  index?: string;
  sku?: string;
}

export interface GQLProductSeo {
  title?: string;
  description?: string;
  keywords?: string;
}

export interface GQLAggregation {
  field?: string;
  type?: GQLAggregationType;
  buckets?: Array<GQLAggregationBucket | null>;
  title?: string;
  priority?: string;
}

export enum GQLAggregationType {
  single = 'single',
  multiple = 'multiple',
  range = 'range'
}

export interface GQLAggregationBucket {
  value?: string;
  count?: number;
  title?: string;
  selected?: boolean;
}

export interface GQLBreadCrumb {
  code: string;
  name: string;
}

export interface GQLSubCategory {
  code: string;
  name: string;
}

export interface GQLShopPageQuery {
  aggregations?: Array<string | null>;
  perPage?: number;
  page?: number;
}

export interface GQLCart {
  id?: string;
  active?: boolean;
  virtual?: boolean;
  items?: Array<GQLCartItem | null>;
  itemsCount?: number;
  itemsQty?: number;
  totals?: Array<GQLCartTotal | null>;
  
  /**
   * 
   * @deprecated Use ShopConfig.activeCurrency
   */
  quoteCurrency?: string;
  couponCode?: string;
  shippingAddress?: GQLAddress;
  billingAddress?: GQLAddress;
  shippingMethod?: GQLShippingMethod;
  avaliableShippingMethods?: Array<GQLShippingMethod | null>;
  paymentMethods?: Array<GQLPaymentMethod | null>;
}

export interface GQLCartItem {
  itemId: number;
  sku: string;
  qty: number;
  name?: string;
  availableQty?: number;
  price?: number;
  productType?: string;
  priceInclTax?: number;
  rowTotal?: number;
  rowTotalInclTax?: number;
  rowTotalWithDiscount?: number;
  taxAmount?: number;
  taxPercent?: number;
  discountAmount?: number;
  discountPercent?: number;
  weeeTaxAmount?: number;
  weeeTaxApplied?: boolean;
  thumbnailUrl?: string;
  urlKey?: string;
  link?: string;
  itemOptions?: Array<GQLCartItemOption | null>;
}

export interface GQLCartItemOption {
  label?: string;
  value?: string;
  data?: Array<GQLCartItemOptionValue | null>;
}

export interface GQLCartItemOptionValue {
  qty?: string;
  name?: string;
  price?: string;
}

export interface GQLCartTotal {
  code: string;
  title?: string;
  value?: number;
}

export interface GQLAddress {
  id: string;
  company?: string;
  firstname: string;
  lastname: string;
  street: Array<string | null>;
  city: string;
  postcode: string;
  countryId: string;
  region?: string;
  regionId?: number;
  telephone?: string;
  fax?: string;
  defaultBilling?: boolean;
  defaultShipping?: boolean;
  floor?: string;
  flat?: string;
  shippingAddress?: boolean;
}

export interface GQLShippingMethod {
  carrierTitle?: string;
  amount?: number;
  carrierCode?: string;
  methodCode?: string;
  methodTitle?: string;
  methodDescription?: string;
  priceExclTax?: number;
  priceInclTax?: number;
  currency?: string;
}

export interface GQLPaymentMethod {
  code?: string;
  title?: string;
  config?: GQLJSON;
}

export type GQLJSON = any;

export interface GQLCountryList {
  items?: Array<GQLCountry | null>;
}

export interface GQLCountry {
  englishName?: string;
  localName?: string;
  code: string;
  regions?: Array<GQLRegion | null>;
}

export interface GQLRegion {
  id?: number;
  name?: string;
  code: string;
}

export interface GQLContactUs {
  email?: string;
  phoneNumber?: string;
  needHelpDropdownDataList?: Array<string | null>;
}

export interface GQLOrder {
  incrementId?: string;
  entityId?: string;
  createdAt?: string;
  customerFirstname?: string;
  customerLastname?: string;
  status?: string;
  orderCurrencyCode?: string;
  baseGrandTotal: number;
  subtotal: number;
  shippingAmount: number;
  taxAmount: number;
  discountAmount: number;
  grandTotal: number;
  items?: Array<GQLOrderItem | null>;
  shippingDescription?: string;
  paymentMethodName?: string;
  shippingAddress?: GQLAddress;
  billingAddress?: GQLAddress;
  couponCode?: string;
}

export interface GQLOrderItem {
  itemId: string;
  sku: string;
  qty: number;
  name?: string;
  availableQty?: number;
  price?: number;
  productType?: string;
  rowTotalInclTax?: number;
  basePrice?: number;
  basePriceInclTax?: number;
  thumbnailUrl?: string;
  urlKey?: string;
  link?: string;
  parentItem?: GQLOrderItem;
}

export interface GQLOrders {
  items: Array<GQLOrder | null>;
  pagination?: GQLPagination;
}

export interface GQLAddressList {
  items: Array<GQLAddress | null>;
}

export interface GQLCustomer {
  id?: string;
  websiteId?: number;
  addresses?: Array<GQLAddress | null>;
  defaultBilling?: string;
  defaultShipping?: string;
  email?: string;
  birthdate?: string;
  gender?: string;
  title?: string;
  firstname?: string;
  lastname?: string;
  newsletterSubscriber?: boolean;
}

export interface GQLCmsPage {
  id: string;
  title?: string;
  content?: string;
}

export interface GQLCmsBlock {
  id: string;
  title?: string;
  content?: string;
  active?: boolean;
}

export interface GQLPage {
  page?: string;
  slug?: GQLSlug;
  title?: string;
  description?: string;
  robotTag?: string;
  label?: string;
  template?: string;
  contentSlots?: Array<GQLContentSlot | null>;
}

export interface GQLSlug {
  current?: string;
}

export interface GQLContentSlot {
  slotId?: string;
  position?: string;
  name?: string;
  slotUuid?: string;
  slotShared?: boolean;
  components?: Array<GQLComponent | null>;
}

export interface GQLComponent {
  uid?: string;
  name?: string;
  container?: string;
  typeCode?: string;
  sequence?: string;
  components?: Array<GQLComponent | null>;
  
  /**
   * 
   * @deprecated don't use
   */
  categoryCode?: string;
  banners?: string;
  content?: string;
  displayProductImages?: string;
  displayProducts?: string;
  displaySuggestions?: string;
  external?: string;
  flexType?: string;
  htmlClass?: string;
  itemsNumber?: string;
  maxProducts?: string;
  maxSuggestions?: string;
  media?: GQLCMSMedia;
  minCharactersBeforeRequest?: string;
  modifiedtime?: string;
  numberOfItems?: string;
  showLanguageCurrency?: string;
  shownProductCount?: string;
  sortByField?: string;
  title?: string;
  totalDisplay?: string;
  urlLink?: string;
  uuid?: string;
  waitTimeBeforeRequest?: string;
  wrapAfter?: string;
  image?: GQLCMSMedia;
  text?: string;
  url?: string;
  products?: Array<GQLCMSProduct | null>;
}

export interface GQLCMSMedia {
  code?: string;
  mime?: string;
  url?: string;
  altText?: string;
  downloadUrl?: string;
  widescreen?: GQLCMSMedia;
  mobile?: GQLCMSMedia;
  desktop?: GQLCMSMedia;
  tablet?: GQLCMSMedia;
  media?: GQLCMSMedia;
}

export interface GQLCMSProduct {
  title?: string;
  code?: string;
  url?: string;
  price?: string;
  media?: GQLCMSMedia;
}

export interface GQLRoutingConfig {
  pathRegex?: string;
  
  /**
   * 
   * @deprecated Use layout
   */
  type?: string;
  layout?: string;
  CMSPageType?: string;
  CMSPageId?: string;
  CMSCode?: string;
}

export interface GQLMutation {
  setLocale?: GQLBackendConfig;
  setShopCurrency?: GQLBackendConfig;
  setShopStore?: GQLBackendConfig;
  addToCart?: GQLCartItemPayload;
  updateCartItem?: GQLCartItemPayload;
  removeCartItem?: GQLRemoveCartItemResponse;
  applyCoupon?: boolean;
  cancelCoupon?: boolean;
  signUp?: boolean;
  signIn?: boolean;
  signOut?: boolean;
  editCustomer?: GQLCustomer;
  editAddress?: GQLAddress;
  addAddress?: GQLAddress;
  estimateShippingMethods?: Array<GQLShippingMethod | null>;
  removeCustomerAddress?: boolean;
  requestCustomerPasswordResetToken?: boolean;
  changeCustomerPassword?: boolean;
  resetCustomerPassword?: boolean;
  setShipping?: GQLShippingInformation;
  placeOrder?: GQLPlaceOrderResult;
  customerSubmitContactUs?: boolean;
  setGuestCheckoutEmail?: boolean;
}

export interface GQLAddToCartInput {
  sku: string;
  qty: number;
  configurableOptions?: Array<GQLConfigurableOptionInput | null>;
  bundleOptions?: Array<GQLBundleOptionInput | null>;
}

export interface GQLConfigurableOptionInput {
  optionId: number;
  value: number;
}

export interface GQLBundleOptionInput {
  optionId: number;
  optionQty: number;
  optionSelections?: Array<number | null>;
}

export interface GQLCartItemPayload {
  itemId: number;
  sku?: string;
  qty?: number;
  name?: string;
  price?: number;
  productType?: string;
}

export interface GQLUpdateCartItemInput {
  itemId: number;
  sku: string;
  qty: number;
}

export interface GQLRemoveCartItemInput {
  itemId: number;
}

export interface GQLRemoveCartItemResponse {
  itemId?: number;
}

export interface GQLCouponInput {
  couponCode: string;
}

export interface GQLSignUp {
  email: string;
  firstname?: string;
  lastname?: string;
  password?: string;
  address?: GQLAddressInput;
  autoSignIn?: boolean;
  titleCode?: string;
  isNewsletter?: boolean;
}

export interface GQLAddressInput {
  id?: string;
  terms?: boolean;
  firstname?: string;
  lastname?: string;
  city?: string;
  customerId?: number;
  customerAddressId?: number;
  postcode?: string;
  saveInAddressBook?: number;
  email?: string;
  company?: string;
  countryId?: string;
  region?: string;
  regionId?: number;
  street?: Array<string | null>;
  telephone?: string;
  floor?: string;
  flat?: string;
  defaultShipping?: boolean;
  defaultBilling?: boolean;
  shippingAddress?: boolean;
}

export interface GQLSignIn {
  email?: string;
  password?: string;
}

export interface GQLCustomerInput {
  websiteId?: number;
  firstname?: string;
  lastname?: string;
  email?: string;
  birthdate?: string;
  gender?: string;
  title?: string;
  defaultBilling?: string;
  defaultShipping?: string;
  newsletterSubscriber?: boolean;
}

export interface GQLEditAddressInput {
  id: string;
  company?: string;
  firstname: string;
  lastname: string;
  telephone?: string;
  street: Array<string | null>;
  postcode: string;
  city: string;
  countryId: string;
  regionId?: number;
  floor?: string;
  flat?: string;
  defaultShipping?: boolean;
  defaultBilling?: boolean;
  shippingAddress?: boolean;
}

export interface GQLAddAddressInput {
  company?: string;
  firstname: string;
  lastname: string;
  telephone: string;
  street: Array<string | null>;
  postcode: string;
  city: string;
  countryId: string;
  regionId?: number;
  floor?: string;
  flat?: string;
  defaultShipping?: boolean;
  defaultBilling?: boolean;
  shippingAddress?: boolean;
}

export interface GQLEstimateShippingInput {
  address?: GQLAddressInput;
  addressId?: string;
}

export interface GQLEmailInput {
  email: string;
}

export interface GQLCustomerPassword {
  currentPassword: string;
  password: string;
}

export interface GQLCustomerPasswordReset {
  resetToken: string;
  password: string;
}

export interface GQLShippingInput {
  billingAddress?: GQLAddressInput;
  billingAddressId?: string;
  shippingAddress?: GQLAddressInput;
  shippingAddressId?: string;
  billingSameAsShipping?: boolean;
  shippingCarrierCode?: string;
  shippingMethodCode?: string;
}

export interface GQLShippingInformation {
  paymentMethods?: Array<GQLPaymentMethod | null>;
  totals?: Array<GQLCartTotal | null>;
}

export interface GQLPlaceOrderInput {
  billingAddress?: GQLAddressInput;
  email?: string;
  paymentMethod?: GQLPaymentMethodInput;
}

export interface GQLPaymentMethodInput {
  method?: string;
  additionalData?: GQLJSON;
}

export type GQLPlaceOrderResult =
GQLPlaceOrderSuccessfulResult |
GQLPlaceOrder3dSecureResult;

/** Use this to resolve union type PlaceOrderResult */
export type GQLPossiblePlaceOrderResultTypeNames =
'PlaceOrderSuccessfulResult' |
'PlaceOrder3dSecureResult';

export interface GQLPlaceOrderResultNameMap {
  PlaceOrderResult: GQLPlaceOrderResult;
  PlaceOrderSuccessfulResult: GQLPlaceOrderSuccessfulResult;
  PlaceOrder3dSecureResult: GQLPlaceOrder3dSecureResult;
}

export interface GQLPlaceOrderSuccessfulResult {
  orderId?: string;
  orderRealId?: string;
}

export interface GQLPlaceOrder3dSecureResult {
  url: string;
  method?: string;
  fields?: Array<GQLPlaceOrder3dSecureField | null>;
}

export interface GQLPlaceOrder3dSecureField {
  name: string;
  value?: string;
}

export interface GQLContactUsInput {
  name: string;
  email: string;
  phoneNumber?: string;
  orderNumber?: string;
  needHelpDropdownValue: string;
  moreDetails?: string;
}

export interface GQLGuestCheckoutEmailInput {
  email: string;
  isNewsletter?: boolean;
}

export interface GQLComponentsObj {
  component?: Array<GQLComponent | null>;
}

export interface GQLContentSlotObj {
  contentSlot?: Array<GQLContentSlot | null>;
}

export interface GQLIdPathEntryInput {
  type?: string;
  path: string;
}

/*********************************
 *                               *
 *         TYPE RESOLVERS        *
 *                               *
 *********************************/
/**
 * This interface define the shape of your resolver
 * Note that this type is designed to be compatible with graphql-tools resolvers
 * However, you can still use other generated interfaces to make your resolver type-safed
 */
export interface GQLResolver {
  Query?: GQLQueryTypeResolver;
  BackendConfig?: GQLBackendConfigTypeResolver;
  BlogConfig?: GQLBlogConfigTypeResolver;
  ShopConfig?: GQLShopConfigTypeResolver;
  ShopStoreEntry?: GQLShopStoreEntryTypeResolver;
  Url?: GQLUrlTypeResolver;
  BlogPost?: GQLBlogPostTypeResolver;
  BlogPostImage?: GQLBlogPostImageTypeResolver;
  BlogPostListing?: GQLBlogPostListingTypeResolver;
  Pagination?: GQLPaginationTypeResolver;
  MenuItem?: GQLMenuItemTypeResolver;
  ItemsCarousel?: GQLItemsCarouselTypeResolver;
  Media?: GQLMediaTypeResolver;
  Category?: GQLCategoryTypeResolver;
  Breadcrumb?: GQLBreadcrumbTypeResolver;
  ProductList?: GQLProductListTypeResolver;
  Product?: GQLProductTypeResolver;
  ProductPrice?: GQLProductPriceTypeResolver;
  ProductTierPrice?: GQLProductTierPriceTypeResolver;
  Stock?: GQLStockTypeResolver;
  ProductAttribute?: GQLProductAttributeTypeResolver;
  ConfigurableProductOption?: GQLConfigurableProductOptionTypeResolver;
  ConfigurableProductOptionValue?: GQLConfigurableProductOptionValueTypeResolver;
  BundleProductOption?: GQLBundleProductOptionTypeResolver;
  BundleProductOptionLink?: GQLBundleProductOptionLinkTypeResolver;
  GalleryEntry?: GQLGalleryEntryTypeResolver;
  ProductSeo?: GQLProductSeoTypeResolver;
  Aggregation?: GQLAggregationTypeResolver;
  AggregationBucket?: GQLAggregationBucketTypeResolver;
  BreadCrumb?: GQLBreadCrumbTypeResolver;
  SubCategory?: GQLSubCategoryTypeResolver;
  Cart?: GQLCartTypeResolver;
  CartItem?: GQLCartItemTypeResolver;
  CartItemOption?: GQLCartItemOptionTypeResolver;
  CartItemOptionValue?: GQLCartItemOptionValueTypeResolver;
  CartTotal?: GQLCartTotalTypeResolver;
  Address?: GQLAddressTypeResolver;
  ShippingMethod?: GQLShippingMethodTypeResolver;
  PaymentMethod?: GQLPaymentMethodTypeResolver;
  JSON?: GraphQLScalarType;
  CountryList?: GQLCountryListTypeResolver;
  Country?: GQLCountryTypeResolver;
  Region?: GQLRegionTypeResolver;
  ContactUs?: GQLContactUsTypeResolver;
  Order?: GQLOrderTypeResolver;
  OrderItem?: GQLOrderItemTypeResolver;
  Orders?: GQLOrdersTypeResolver;
  AddressList?: GQLAddressListTypeResolver;
  Customer?: GQLCustomerTypeResolver;
  CmsPage?: GQLCmsPageTypeResolver;
  CmsBlock?: GQLCmsBlockTypeResolver;
  Page?: GQLPageTypeResolver;
  Slug?: GQLSlugTypeResolver;
  ContentSlot?: GQLContentSlotTypeResolver;
  Component?: GQLComponentTypeResolver;
  CMSMedia?: GQLCMSMediaTypeResolver;
  CMSProduct?: GQLCMSProductTypeResolver;
  RoutingConfig?: GQLRoutingConfigTypeResolver;
  Mutation?: GQLMutationTypeResolver;
  CartItemPayload?: GQLCartItemPayloadTypeResolver;
  RemoveCartItemResponse?: GQLRemoveCartItemResponseTypeResolver;
  ShippingInformation?: GQLShippingInformationTypeResolver;
  PlaceOrderResult?: {
    __resolveType: GQLPlaceOrderResultTypeResolver
  };
  
  PlaceOrderSuccessfulResult?: GQLPlaceOrderSuccessfulResultTypeResolver;
  PlaceOrder3dSecureResult?: GQLPlaceOrder3dSecureResultTypeResolver;
  PlaceOrder3dSecureField?: GQLPlaceOrder3dSecureFieldTypeResolver;
  ComponentsObj?: GQLComponentsObjTypeResolver;
  ContentSlotObj?: GQLContentSlotObjTypeResolver;
}
export interface GQLQueryTypeResolver<TParent = any> {
  backendConfig?: QueryToBackendConfigResolver<TParent>;
  url?: QueryToUrlResolver<TParent>;
  blogPost?: QueryToBlogPostResolver<TParent>;
  blogPosts?: QueryToBlogPostsResolver<TParent>;
  menu?: QueryToMenuResolver<TParent>;
  category?: QueryToCategoryResolver<TParent>;
  product?: QueryToProductResolver<TParent>;
  products?: QueryToProductsResolver<TParent>;
  cart?: QueryToCartResolver<TParent>;
  countries?: QueryToCountriesResolver<TParent>;
  contactUs?: QueryToContactUsResolver<TParent>;
  order?: QueryToOrderResolver<TParent>;
  lastOrder?: QueryToLastOrderResolver<TParent>;
  orders?: QueryToOrdersResolver<TParent>;
  address?: QueryToAddressResolver<TParent>;
  addresses?: QueryToAddressesResolver<TParent>;
  customer?: QueryToCustomerResolver<TParent>;
  cmsPage?: QueryToCmsPageResolver<TParent>;
  cmsBlock?: QueryToCmsBlockResolver<TParent>;
  validatePasswordToken?: QueryToValidatePasswordTokenResolver<TParent>;
  page?: QueryToPageResolver<TParent>;
  routingConfig?: QueryToRoutingConfigResolver<TParent>;
  devGenComponent?: QueryToDevGenComponentResolver<TParent>;
}

export interface QueryToBackendConfigResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToUrlArgs {
  path: string;
}
export interface QueryToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToUrlArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToBlogPostArgs {
  path: string;
}
export interface QueryToBlogPostResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToBlogPostArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToBlogPostsArgs {
  query?: GQLBlogPageQuery;
  pagination?: GQLPaginationInput;
}
export interface QueryToBlogPostsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToBlogPostsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToMenuResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToCategoryArgs {
  id: string;
}
export interface QueryToCategoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToCategoryArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToProductArgs {
  id: string;
}
export interface QueryToProductResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToProductArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToProductsArgs {
  term?: string;
  categoryId?: string;
  includeSubcategories?: boolean;
  query?: GQLShopPageQuery;
  sortOrders?: Array<GQLSortOrderInput | null>;
  filters?: Array<GQLFilterInput | null>;
  skus?: Array<string | null>;
}
export interface QueryToProductsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToProductsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToCartResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToCountriesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToContactUsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToOrderArgs {
  id: string;
}
export interface QueryToOrderResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToOrderArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToLastOrderResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToOrdersArgs {
  pagination?: GQLPaginationInput;
}
export interface QueryToOrdersResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToOrdersArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToAddressArgs {
  id: number;
}
export interface QueryToAddressResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToAddressArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToAddressesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToCustomerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToCmsPageArgs {
  id?: number;
  identifier?: string;
}
export interface QueryToCmsPageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToCmsPageArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToCmsBlockArgs {
  identifier?: string;
}
export interface QueryToCmsBlockResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToCmsBlockArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToValidatePasswordTokenArgs {
  token: string;
}
export interface QueryToValidatePasswordTokenResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToValidatePasswordTokenArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToPageArgs {
  id?: string;
  lang?: string;
  device?: string;
  uid?: string;
  CMSCode?: string;
  CMSPageType?: string;
}
export interface QueryToPageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToPageArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToRoutingConfigResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToDevGenComponentArgs {
  slug: string;
  lang?: string;
  device?: string;
  uid?: string;
}
export interface QueryToDevGenComponentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToDevGenComponentArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLBackendConfigTypeResolver<TParent = any> {
  locales?: BackendConfigToLocalesResolver<TParent>;
  activeLocale?: BackendConfigToActiveLocaleResolver<TParent>;
  blog?: BackendConfigToBlogResolver<TParent>;
  shop?: BackendConfigToShopResolver<TParent>;
}

export interface BackendConfigToLocalesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BackendConfigToActiveLocaleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BackendConfigToBlogResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BackendConfigToShopResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLBlogConfigTypeResolver<TParent = any> {
  _?: BlogConfigTo_Resolver<TParent>;
}

export interface BlogConfigTo_Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLShopConfigTypeResolver<TParent = any> {
  activeCurrency?: ShopConfigToActiveCurrencyResolver<TParent>;
  activeStore?: ShopConfigToActiveStoreResolver<TParent>;
  currencies?: ShopConfigToCurrenciesResolver<TParent>;
  baseCurrency?: ShopConfigToBaseCurrencyResolver<TParent>;
  stores?: ShopConfigToStoresResolver<TParent>;
  timezone?: ShopConfigToTimezoneResolver<TParent>;
  weightUnit?: ShopConfigToWeightUnitResolver<TParent>;
}

export interface ShopConfigToActiveCurrencyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ShopConfigToActiveStoreResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ShopConfigToCurrenciesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ShopConfigToBaseCurrencyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ShopConfigToStoresResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ShopConfigToTimezoneResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ShopConfigToWeightUnitResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLShopStoreEntryTypeResolver<TParent = any> {
  name?: ShopStoreEntryToNameResolver<TParent>;
  code?: ShopStoreEntryToCodeResolver<TParent>;
}

export interface ShopStoreEntryToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ShopStoreEntryToCodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUrlTypeResolver<TParent = any> {
  id?: UrlToIdResolver<TParent>;
  path?: UrlToPathResolver<TParent>;
  type?: UrlToTypeResolver<TParent>;
  redirect?: UrlToRedirectResolver<TParent>;
}

export interface UrlToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UrlToPathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UrlToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UrlToRedirectResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLBlogPostTypeResolver<TParent = any> {
  id?: BlogPostToIdResolver<TParent>;
  date?: BlogPostToDateResolver<TParent>;
  modified?: BlogPostToModifiedResolver<TParent>;
  title?: BlogPostToTitleResolver<TParent>;
  content?: BlogPostToContentResolver<TParent>;
  excerpt?: BlogPostToExcerptResolver<TParent>;
  slug?: BlogPostToSlugResolver<TParent>;
  status?: BlogPostToStatusResolver<TParent>;
  image?: BlogPostToImageResolver<TParent>;
  related?: BlogPostToRelatedResolver<TParent>;
}

export interface BlogPostToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BlogPostToDateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BlogPostToModifiedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BlogPostToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BlogPostToContentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BlogPostToExcerptResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BlogPostToSlugResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BlogPostToStatusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BlogPostToImageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BlogPostToRelatedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLBlogPostImageTypeResolver<TParent = any> {
  url?: BlogPostImageToUrlResolver<TParent>;
  description?: BlogPostImageToDescriptionResolver<TParent>;
}

export interface BlogPostImageToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BlogPostImageToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLBlogPostListingTypeResolver<TParent = any> {
  items?: BlogPostListingToItemsResolver<TParent>;
  pagination?: BlogPostListingToPaginationResolver<TParent>;
}

export interface BlogPostListingToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BlogPostListingToPaginationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPaginationTypeResolver<TParent = any> {
  totalPages?: PaginationToTotalPagesResolver<TParent>;
  totalItems?: PaginationToTotalItemsResolver<TParent>;
  perPage?: PaginationToPerPageResolver<TParent>;
  currentPage?: PaginationToCurrentPageResolver<TParent>;
  nextPage?: PaginationToNextPageResolver<TParent>;
  prevPage?: PaginationToPrevPageResolver<TParent>;
}

export interface PaginationToTotalPagesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PaginationToTotalItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PaginationToPerPageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PaginationToCurrentPageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PaginationToNextPageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PaginationToPrevPageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLMenuItemTypeResolver<TParent = any> {
  id?: MenuItemToIdResolver<TParent>;
  name?: MenuItemToNameResolver<TParent>;
  urlPath?: MenuItemToUrlPathResolver<TParent>;
  cssClass?: MenuItemToCssClassResolver<TParent>;
  children?: MenuItemToChildrenResolver<TParent>;
  images?: MenuItemToImagesResolver<TParent>;
}

export interface MenuItemToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MenuItemToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MenuItemToUrlPathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MenuItemToCssClassResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MenuItemToChildrenResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MenuItemToImagesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLItemsCarouselTypeResolver<TParent = any> {
  media?: ItemsCarouselToMediaResolver<TParent>;
  urlPath?: ItemsCarouselToUrlPathResolver<TParent>;
  text?: ItemsCarouselToTextResolver<TParent>;
}

export interface ItemsCarouselToMediaResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ItemsCarouselToUrlPathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ItemsCarouselToTextResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLMediaTypeResolver<TParent = any> {
  type?: MediaToTypeResolver<TParent>;
  url?: MediaToUrlResolver<TParent>;
}

export interface MediaToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MediaToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCategoryTypeResolver<TParent = any> {
  id?: CategoryToIdResolver<TParent>;
  name?: CategoryToNameResolver<TParent>;
  children?: CategoryToChildrenResolver<TParent>;
  description?: CategoryToDescriptionResolver<TParent>;
  breadcrumbs?: CategoryToBreadcrumbsResolver<TParent>;
  products?: CategoryToProductsResolver<TParent>;
}

export interface CategoryToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CategoryToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CategoryToChildrenResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CategoryToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CategoryToBreadcrumbsArgs {
  path: string;
}
export interface CategoryToBreadcrumbsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: CategoryToBreadcrumbsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CategoryToProductsArgs {
  pagination?: GQLPaginationInput;
  sort?: GQLSortOrderInput;
  filters?: Array<GQLFilterInput | null>;
}
export interface CategoryToProductsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: CategoryToProductsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLBreadcrumbTypeResolver<TParent = any> {
  name?: BreadcrumbToNameResolver<TParent>;
  urlPath?: BreadcrumbToUrlPathResolver<TParent>;
}

export interface BreadcrumbToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BreadcrumbToUrlPathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLProductListTypeResolver<TParent = any> {
  items?: ProductListToItemsResolver<TParent>;
  aggregations?: ProductListToAggregationsResolver<TParent>;
  pagination?: ProductListToPaginationResolver<TParent>;
  breadcrumbs?: ProductListToBreadcrumbsResolver<TParent>;
  subCategories?: ProductListToSubCategoriesResolver<TParent>;
}

export interface ProductListToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductListToAggregationsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductListToPaginationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductListToBreadcrumbsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductListToSubCategoriesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLProductTypeResolver<TParent = any> {
  id?: ProductToIdResolver<TParent>;
  sku?: ProductToSkuResolver<TParent>;
  name?: ProductToNameResolver<TParent>;
  image?: ProductToImageResolver<TParent>;
  urlPath?: ProductToUrlPathResolver<TParent>;
  thumbnail?: ProductToThumbnailResolver<TParent>;
  price?: ProductToPriceResolver<TParent>;
  tierPrices?: ProductToTierPricesResolver<TParent>;
  currency?: ProductToCurrencyResolver<TParent>;
  formattedPrice?: ProductToFormattedPriceResolver<TParent>;
  previousFormattedPrice?: ProductToPreviousFormattedPriceResolver<TParent>;
  ean?: ProductToEanResolver<TParent>;
  packageUnit?: ProductToPackageUnitResolver<TParent>;
  description?: ProductToDescriptionResolver<TParent>;
  instructions?: ProductToInstructionsResolver<TParent>;
  ingridients?: ProductToIngridientsResolver<TParent>;
  stock?: ProductToStockResolver<TParent>;
  type?: ProductToTypeResolver<TParent>;
  attributes?: ProductToAttributesResolver<TParent>;
  configurableOptions?: ProductToConfigurableOptionsResolver<TParent>;
  bundleOptions?: ProductToBundleOptionsResolver<TParent>;
  gallery?: ProductToGalleryResolver<TParent>;
  breadcrumbs?: ProductToBreadcrumbsResolver<TParent>;
  seo?: ProductToSeoResolver<TParent>;
}

export interface ProductToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductToSkuResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductToImageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductToUrlPathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductToThumbnailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductToPriceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductToTierPricesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductToCurrencyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductToFormattedPriceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductToPreviousFormattedPriceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductToEanResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductToPackageUnitResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductToInstructionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductToIngridientsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductToStockResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductToAttributesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductToConfigurableOptionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductToBundleOptionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductToGalleryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductToBreadcrumbsArgs {
  path: string;
}
export interface ProductToBreadcrumbsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: ProductToBreadcrumbsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductToSeoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLProductPriceTypeResolver<TParent = any> {
  regular?: ProductPriceToRegularResolver<TParent>;
  special?: ProductPriceToSpecialResolver<TParent>;
  minTier?: ProductPriceToMinTierResolver<TParent>;
}

export interface ProductPriceToRegularResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductPriceToSpecialResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductPriceToMinTierResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLProductTierPriceTypeResolver<TParent = any> {
  qty?: ProductTierPriceToQtyResolver<TParent>;
  value?: ProductTierPriceToValueResolver<TParent>;
  discount?: ProductTierPriceToDiscountResolver<TParent>;
}

export interface ProductTierPriceToQtyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductTierPriceToValueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductTierPriceToDiscountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLStockTypeResolver<TParent = any> {
  isInStock?: StockToIsInStockResolver<TParent>;
  qty?: StockToQtyResolver<TParent>;
}

export interface StockToIsInStockResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StockToQtyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLProductAttributeTypeResolver<TParent = any> {
  name?: ProductAttributeToNameResolver<TParent>;
  value?: ProductAttributeToValueResolver<TParent>;
}

export interface ProductAttributeToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductAttributeToValueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLConfigurableProductOptionTypeResolver<TParent = any> {
  id?: ConfigurableProductOptionToIdResolver<TParent>;
  attributeId?: ConfigurableProductOptionToAttributeIdResolver<TParent>;
  label?: ConfigurableProductOptionToLabelResolver<TParent>;
  position?: ConfigurableProductOptionToPositionResolver<TParent>;
  productId?: ConfigurableProductOptionToProductIdResolver<TParent>;
  values?: ConfigurableProductOptionToValuesResolver<TParent>;
}

export interface ConfigurableProductOptionToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductOptionToAttributeIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductOptionToLabelResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductOptionToPositionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductOptionToProductIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductOptionToValuesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLConfigurableProductOptionValueTypeResolver<TParent = any> {
  inStock?: ConfigurableProductOptionValueToInStockResolver<TParent>;
  price?: ConfigurableProductOptionValueToPriceResolver<TParent>;
  label?: ConfigurableProductOptionValueToLabelResolver<TParent>;
  valueIndex?: ConfigurableProductOptionValueToValueIndexResolver<TParent>;
  previousFormattedPrice?: ConfigurableProductOptionValueToPreviousFormattedPriceResolver<TParent>;
  formattedPrice?: ConfigurableProductOptionValueToFormattedPriceResolver<TParent>;
  ean?: ConfigurableProductOptionValueToEanResolver<TParent>;
  packageUnit?: ConfigurableProductOptionValueToPackageUnitResolver<TParent>;
}

export interface ConfigurableProductOptionValueToInStockResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductOptionValueToPriceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductOptionValueToLabelResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductOptionValueToValueIndexResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductOptionValueToPreviousFormattedPriceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductOptionValueToFormattedPriceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductOptionValueToEanResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductOptionValueToPackageUnitResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLBundleProductOptionTypeResolver<TParent = any> {
  optionId?: BundleProductOptionToOptionIdResolver<TParent>;
  position?: BundleProductOptionToPositionResolver<TParent>;
  productLinks?: BundleProductOptionToProductLinksResolver<TParent>;
  required?: BundleProductOptionToRequiredResolver<TParent>;
  sku?: BundleProductOptionToSkuResolver<TParent>;
  title?: BundleProductOptionToTitleResolver<TParent>;
  type?: BundleProductOptionToTypeResolver<TParent>;
}

export interface BundleProductOptionToOptionIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductOptionToPositionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductOptionToProductLinksResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductOptionToRequiredResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductOptionToSkuResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductOptionToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductOptionToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLBundleProductOptionLinkTypeResolver<TParent = any> {
  canChangeQuantity?: BundleProductOptionLinkToCanChangeQuantityResolver<TParent>;
  name?: BundleProductOptionLinkToNameResolver<TParent>;
  catalogDisplayPrice?: BundleProductOptionLinkToCatalogDisplayPriceResolver<TParent>;
  id?: BundleProductOptionLinkToIdResolver<TParent>;
  isDefault?: BundleProductOptionLinkToIsDefaultResolver<TParent>;
  optionId?: BundleProductOptionLinkToOptionIdResolver<TParent>;
  position?: BundleProductOptionLinkToPositionResolver<TParent>;
  price?: BundleProductOptionLinkToPriceResolver<TParent>;
  priceType?: BundleProductOptionLinkToPriceTypeResolver<TParent>;
  qty?: BundleProductOptionLinkToQtyResolver<TParent>;
  sku?: BundleProductOptionLinkToSkuResolver<TParent>;
}

export interface BundleProductOptionLinkToCanChangeQuantityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductOptionLinkToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductOptionLinkToCatalogDisplayPriceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductOptionLinkToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductOptionLinkToIsDefaultResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductOptionLinkToOptionIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductOptionLinkToPositionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductOptionLinkToPriceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductOptionLinkToPriceTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductOptionLinkToQtyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductOptionLinkToSkuResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLGalleryEntryTypeResolver<TParent = any> {
  type?: GalleryEntryToTypeResolver<TParent>;
  full?: GalleryEntryToFullResolver<TParent>;
  thumbnail?: GalleryEntryToThumbnailResolver<TParent>;
  embedUrl?: GalleryEntryToEmbedUrlResolver<TParent>;
  format?: GalleryEntryToFormatResolver<TParent>;
  index?: GalleryEntryToIndexResolver<TParent>;
  sku?: GalleryEntryToSkuResolver<TParent>;
}

export interface GalleryEntryToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GalleryEntryToFullResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GalleryEntryToThumbnailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GalleryEntryToEmbedUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GalleryEntryToFormatResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GalleryEntryToIndexResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GalleryEntryToSkuResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLProductSeoTypeResolver<TParent = any> {
  title?: ProductSeoToTitleResolver<TParent>;
  description?: ProductSeoToDescriptionResolver<TParent>;
  keywords?: ProductSeoToKeywordsResolver<TParent>;
}

export interface ProductSeoToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductSeoToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductSeoToKeywordsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLAggregationTypeResolver<TParent = any> {
  field?: AggregationToFieldResolver<TParent>;
  type?: AggregationToTypeResolver<TParent>;
  buckets?: AggregationToBucketsResolver<TParent>;
  title?: AggregationToTitleResolver<TParent>;
  priority?: AggregationToPriorityResolver<TParent>;
}

export interface AggregationToFieldResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AggregationToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AggregationToBucketsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AggregationToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AggregationToPriorityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLAggregationBucketTypeResolver<TParent = any> {
  value?: AggregationBucketToValueResolver<TParent>;
  count?: AggregationBucketToCountResolver<TParent>;
  title?: AggregationBucketToTitleResolver<TParent>;
  selected?: AggregationBucketToSelectedResolver<TParent>;
}

export interface AggregationBucketToValueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AggregationBucketToCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AggregationBucketToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AggregationBucketToSelectedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLBreadCrumbTypeResolver<TParent = any> {
  code?: BreadCrumbToCodeResolver<TParent>;
  name?: BreadCrumbToNameResolver<TParent>;
}

export interface BreadCrumbToCodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BreadCrumbToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSubCategoryTypeResolver<TParent = any> {
  code?: SubCategoryToCodeResolver<TParent>;
  name?: SubCategoryToNameResolver<TParent>;
}

export interface SubCategoryToCodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SubCategoryToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCartTypeResolver<TParent = any> {
  id?: CartToIdResolver<TParent>;
  active?: CartToActiveResolver<TParent>;
  virtual?: CartToVirtualResolver<TParent>;
  items?: CartToItemsResolver<TParent>;
  itemsCount?: CartToItemsCountResolver<TParent>;
  itemsQty?: CartToItemsQtyResolver<TParent>;
  totals?: CartToTotalsResolver<TParent>;
  quoteCurrency?: CartToQuoteCurrencyResolver<TParent>;
  couponCode?: CartToCouponCodeResolver<TParent>;
  shippingAddress?: CartToShippingAddressResolver<TParent>;
  billingAddress?: CartToBillingAddressResolver<TParent>;
  shippingMethod?: CartToShippingMethodResolver<TParent>;
  avaliableShippingMethods?: CartToAvaliableShippingMethodsResolver<TParent>;
  paymentMethods?: CartToPaymentMethodsResolver<TParent>;
}

export interface CartToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CartToActiveResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CartToVirtualResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CartToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CartToItemsCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CartToItemsQtyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CartToTotalsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CartToQuoteCurrencyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CartToCouponCodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CartToShippingAddressResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CartToBillingAddressResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CartToShippingMethodResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CartToAvaliableShippingMethodsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CartToPaymentMethodsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCartItemTypeResolver<TParent = any> {
  itemId?: CartItemToItemIdResolver<TParent>;
  sku?: CartItemToSkuResolver<TParent>;
  qty?: CartItemToQtyResolver<TParent>;
  name?: CartItemToNameResolver<TParent>;
  availableQty?: CartItemToAvailableQtyResolver<TParent>;
  price?: CartItemToPriceResolver<TParent>;
  productType?: CartItemToProductTypeResolver<TParent>;
  priceInclTax?: CartItemToPriceInclTaxResolver<TParent>;
  rowTotal?: CartItemToRowTotalResolver<TParent>;
  rowTotalInclTax?: CartItemToRowTotalInclTaxResolver<TParent>;
  rowTotalWithDiscount?: CartItemToRowTotalWithDiscountResolver<TParent>;
  taxAmount?: CartItemToTaxAmountResolver<TParent>;
  taxPercent?: CartItemToTaxPercentResolver<TParent>;
  discountAmount?: CartItemToDiscountAmountResolver<TParent>;
  discountPercent?: CartItemToDiscountPercentResolver<TParent>;
  weeeTaxAmount?: CartItemToWeeeTaxAmountResolver<TParent>;
  weeeTaxApplied?: CartItemToWeeeTaxAppliedResolver<TParent>;
  thumbnailUrl?: CartItemToThumbnailUrlResolver<TParent>;
  urlKey?: CartItemToUrlKeyResolver<TParent>;
  link?: CartItemToLinkResolver<TParent>;
  itemOptions?: CartItemToItemOptionsResolver<TParent>;
}

export interface CartItemToItemIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CartItemToSkuResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CartItemToQtyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CartItemToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CartItemToAvailableQtyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CartItemToPriceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CartItemToProductTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CartItemToPriceInclTaxResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CartItemToRowTotalResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CartItemToRowTotalInclTaxResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CartItemToRowTotalWithDiscountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CartItemToTaxAmountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CartItemToTaxPercentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CartItemToDiscountAmountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CartItemToDiscountPercentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CartItemToWeeeTaxAmountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CartItemToWeeeTaxAppliedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CartItemToThumbnailUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CartItemToUrlKeyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CartItemToLinkResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CartItemToItemOptionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCartItemOptionTypeResolver<TParent = any> {
  label?: CartItemOptionToLabelResolver<TParent>;
  value?: CartItemOptionToValueResolver<TParent>;
  data?: CartItemOptionToDataResolver<TParent>;
}

export interface CartItemOptionToLabelResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CartItemOptionToValueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CartItemOptionToDataResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCartItemOptionValueTypeResolver<TParent = any> {
  qty?: CartItemOptionValueToQtyResolver<TParent>;
  name?: CartItemOptionValueToNameResolver<TParent>;
  price?: CartItemOptionValueToPriceResolver<TParent>;
}

export interface CartItemOptionValueToQtyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CartItemOptionValueToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CartItemOptionValueToPriceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCartTotalTypeResolver<TParent = any> {
  code?: CartTotalToCodeResolver<TParent>;
  title?: CartTotalToTitleResolver<TParent>;
  value?: CartTotalToValueResolver<TParent>;
}

export interface CartTotalToCodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CartTotalToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CartTotalToValueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLAddressTypeResolver<TParent = any> {
  id?: AddressToIdResolver<TParent>;
  company?: AddressToCompanyResolver<TParent>;
  firstname?: AddressToFirstnameResolver<TParent>;
  lastname?: AddressToLastnameResolver<TParent>;
  street?: AddressToStreetResolver<TParent>;
  city?: AddressToCityResolver<TParent>;
  postcode?: AddressToPostcodeResolver<TParent>;
  countryId?: AddressToCountryIdResolver<TParent>;
  region?: AddressToRegionResolver<TParent>;
  regionId?: AddressToRegionIdResolver<TParent>;
  telephone?: AddressToTelephoneResolver<TParent>;
  fax?: AddressToFaxResolver<TParent>;
  defaultBilling?: AddressToDefaultBillingResolver<TParent>;
  defaultShipping?: AddressToDefaultShippingResolver<TParent>;
  floor?: AddressToFloorResolver<TParent>;
  flat?: AddressToFlatResolver<TParent>;
  shippingAddress?: AddressToShippingAddressResolver<TParent>;
}

export interface AddressToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddressToCompanyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddressToFirstnameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddressToLastnameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddressToStreetResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddressToCityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddressToPostcodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddressToCountryIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddressToRegionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddressToRegionIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddressToTelephoneResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddressToFaxResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddressToDefaultBillingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddressToDefaultShippingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddressToFloorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddressToFlatResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddressToShippingAddressResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLShippingMethodTypeResolver<TParent = any> {
  carrierTitle?: ShippingMethodToCarrierTitleResolver<TParent>;
  amount?: ShippingMethodToAmountResolver<TParent>;
  carrierCode?: ShippingMethodToCarrierCodeResolver<TParent>;
  methodCode?: ShippingMethodToMethodCodeResolver<TParent>;
  methodTitle?: ShippingMethodToMethodTitleResolver<TParent>;
  methodDescription?: ShippingMethodToMethodDescriptionResolver<TParent>;
  priceExclTax?: ShippingMethodToPriceExclTaxResolver<TParent>;
  priceInclTax?: ShippingMethodToPriceInclTaxResolver<TParent>;
  currency?: ShippingMethodToCurrencyResolver<TParent>;
}

export interface ShippingMethodToCarrierTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ShippingMethodToAmountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ShippingMethodToCarrierCodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ShippingMethodToMethodCodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ShippingMethodToMethodTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ShippingMethodToMethodDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ShippingMethodToPriceExclTaxResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ShippingMethodToPriceInclTaxResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ShippingMethodToCurrencyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPaymentMethodTypeResolver<TParent = any> {
  code?: PaymentMethodToCodeResolver<TParent>;
  title?: PaymentMethodToTitleResolver<TParent>;
  config?: PaymentMethodToConfigResolver<TParent>;
}

export interface PaymentMethodToCodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PaymentMethodToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PaymentMethodToConfigResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCountryListTypeResolver<TParent = any> {
  items?: CountryListToItemsResolver<TParent>;
}

export interface CountryListToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCountryTypeResolver<TParent = any> {
  englishName?: CountryToEnglishNameResolver<TParent>;
  localName?: CountryToLocalNameResolver<TParent>;
  code?: CountryToCodeResolver<TParent>;
  regions?: CountryToRegionsResolver<TParent>;
}

export interface CountryToEnglishNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CountryToLocalNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CountryToCodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CountryToRegionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRegionTypeResolver<TParent = any> {
  id?: RegionToIdResolver<TParent>;
  name?: RegionToNameResolver<TParent>;
  code?: RegionToCodeResolver<TParent>;
}

export interface RegionToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RegionToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RegionToCodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLContactUsTypeResolver<TParent = any> {
  email?: ContactUsToEmailResolver<TParent>;
  phoneNumber?: ContactUsToPhoneNumberResolver<TParent>;
  needHelpDropdownDataList?: ContactUsToNeedHelpDropdownDataListResolver<TParent>;
}

export interface ContactUsToEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContactUsToPhoneNumberResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContactUsToNeedHelpDropdownDataListResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLOrderTypeResolver<TParent = any> {
  incrementId?: OrderToIncrementIdResolver<TParent>;
  entityId?: OrderToEntityIdResolver<TParent>;
  createdAt?: OrderToCreatedAtResolver<TParent>;
  customerFirstname?: OrderToCustomerFirstnameResolver<TParent>;
  customerLastname?: OrderToCustomerLastnameResolver<TParent>;
  status?: OrderToStatusResolver<TParent>;
  orderCurrencyCode?: OrderToOrderCurrencyCodeResolver<TParent>;
  baseGrandTotal?: OrderToBaseGrandTotalResolver<TParent>;
  subtotal?: OrderToSubtotalResolver<TParent>;
  shippingAmount?: OrderToShippingAmountResolver<TParent>;
  taxAmount?: OrderToTaxAmountResolver<TParent>;
  discountAmount?: OrderToDiscountAmountResolver<TParent>;
  grandTotal?: OrderToGrandTotalResolver<TParent>;
  items?: OrderToItemsResolver<TParent>;
  shippingDescription?: OrderToShippingDescriptionResolver<TParent>;
  paymentMethodName?: OrderToPaymentMethodNameResolver<TParent>;
  shippingAddress?: OrderToShippingAddressResolver<TParent>;
  billingAddress?: OrderToBillingAddressResolver<TParent>;
  couponCode?: OrderToCouponCodeResolver<TParent>;
}

export interface OrderToIncrementIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderToEntityIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderToCustomerFirstnameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderToCustomerLastnameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderToStatusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderToOrderCurrencyCodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderToBaseGrandTotalResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderToSubtotalResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderToShippingAmountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderToTaxAmountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderToDiscountAmountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderToGrandTotalResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderToShippingDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderToPaymentMethodNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderToShippingAddressResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderToBillingAddressResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderToCouponCodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLOrderItemTypeResolver<TParent = any> {
  itemId?: OrderItemToItemIdResolver<TParent>;
  sku?: OrderItemToSkuResolver<TParent>;
  qty?: OrderItemToQtyResolver<TParent>;
  name?: OrderItemToNameResolver<TParent>;
  availableQty?: OrderItemToAvailableQtyResolver<TParent>;
  price?: OrderItemToPriceResolver<TParent>;
  productType?: OrderItemToProductTypeResolver<TParent>;
  rowTotalInclTax?: OrderItemToRowTotalInclTaxResolver<TParent>;
  basePrice?: OrderItemToBasePriceResolver<TParent>;
  basePriceInclTax?: OrderItemToBasePriceInclTaxResolver<TParent>;
  thumbnailUrl?: OrderItemToThumbnailUrlResolver<TParent>;
  urlKey?: OrderItemToUrlKeyResolver<TParent>;
  link?: OrderItemToLinkResolver<TParent>;
  parentItem?: OrderItemToParentItemResolver<TParent>;
}

export interface OrderItemToItemIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderItemToSkuResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderItemToQtyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderItemToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderItemToAvailableQtyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderItemToPriceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderItemToProductTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderItemToRowTotalInclTaxResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderItemToBasePriceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderItemToBasePriceInclTaxResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderItemToThumbnailUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderItemToUrlKeyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderItemToLinkResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderItemToParentItemResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLOrdersTypeResolver<TParent = any> {
  items?: OrdersToItemsResolver<TParent>;
  pagination?: OrdersToPaginationResolver<TParent>;
}

export interface OrdersToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrdersToPaginationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLAddressListTypeResolver<TParent = any> {
  items?: AddressListToItemsResolver<TParent>;
}

export interface AddressListToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCustomerTypeResolver<TParent = any> {
  id?: CustomerToIdResolver<TParent>;
  websiteId?: CustomerToWebsiteIdResolver<TParent>;
  addresses?: CustomerToAddressesResolver<TParent>;
  defaultBilling?: CustomerToDefaultBillingResolver<TParent>;
  defaultShipping?: CustomerToDefaultShippingResolver<TParent>;
  email?: CustomerToEmailResolver<TParent>;
  birthdate?: CustomerToBirthdateResolver<TParent>;
  gender?: CustomerToGenderResolver<TParent>;
  title?: CustomerToTitleResolver<TParent>;
  firstname?: CustomerToFirstnameResolver<TParent>;
  lastname?: CustomerToLastnameResolver<TParent>;
  newsletterSubscriber?: CustomerToNewsletterSubscriberResolver<TParent>;
}

export interface CustomerToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomerToWebsiteIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomerToAddressesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomerToDefaultBillingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomerToDefaultShippingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomerToEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomerToBirthdateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomerToGenderResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomerToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomerToFirstnameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomerToLastnameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomerToNewsletterSubscriberResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCmsPageTypeResolver<TParent = any> {
  id?: CmsPageToIdResolver<TParent>;
  title?: CmsPageToTitleResolver<TParent>;
  content?: CmsPageToContentResolver<TParent>;
}

export interface CmsPageToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CmsPageToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CmsPageToContentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCmsBlockTypeResolver<TParent = any> {
  id?: CmsBlockToIdResolver<TParent>;
  title?: CmsBlockToTitleResolver<TParent>;
  content?: CmsBlockToContentResolver<TParent>;
  active?: CmsBlockToActiveResolver<TParent>;
}

export interface CmsBlockToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CmsBlockToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CmsBlockToContentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CmsBlockToActiveResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPageTypeResolver<TParent = any> {
  page?: PageToPageResolver<TParent>;
  slug?: PageToSlugResolver<TParent>;
  title?: PageToTitleResolver<TParent>;
  description?: PageToDescriptionResolver<TParent>;
  robotTag?: PageToRobotTagResolver<TParent>;
  label?: PageToLabelResolver<TParent>;
  template?: PageToTemplateResolver<TParent>;
  contentSlots?: PageToContentSlotsResolver<TParent>;
}

export interface PageToPageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PageToSlugResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PageToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PageToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PageToRobotTagResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PageToLabelResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PageToTemplateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PageToContentSlotsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSlugTypeResolver<TParent = any> {
  current?: SlugToCurrentResolver<TParent>;
}

export interface SlugToCurrentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLContentSlotTypeResolver<TParent = any> {
  slotId?: ContentSlotToSlotIdResolver<TParent>;
  position?: ContentSlotToPositionResolver<TParent>;
  name?: ContentSlotToNameResolver<TParent>;
  slotUuid?: ContentSlotToSlotUuidResolver<TParent>;
  slotShared?: ContentSlotToSlotSharedResolver<TParent>;
  components?: ContentSlotToComponentsResolver<TParent>;
}

export interface ContentSlotToSlotIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContentSlotToPositionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContentSlotToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContentSlotToSlotUuidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContentSlotToSlotSharedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContentSlotToComponentsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLComponentTypeResolver<TParent = any> {
  uid?: ComponentToUidResolver<TParent>;
  name?: ComponentToNameResolver<TParent>;
  container?: ComponentToContainerResolver<TParent>;
  typeCode?: ComponentToTypeCodeResolver<TParent>;
  sequence?: ComponentToSequenceResolver<TParent>;
  components?: ComponentToComponentsResolver<TParent>;
  categoryCode?: ComponentToCategoryCodeResolver<TParent>;
  banners?: ComponentToBannersResolver<TParent>;
  content?: ComponentToContentResolver<TParent>;
  displayProductImages?: ComponentToDisplayProductImagesResolver<TParent>;
  displayProducts?: ComponentToDisplayProductsResolver<TParent>;
  displaySuggestions?: ComponentToDisplaySuggestionsResolver<TParent>;
  external?: ComponentToExternalResolver<TParent>;
  flexType?: ComponentToFlexTypeResolver<TParent>;
  htmlClass?: ComponentToHtmlClassResolver<TParent>;
  itemsNumber?: ComponentToItemsNumberResolver<TParent>;
  maxProducts?: ComponentToMaxProductsResolver<TParent>;
  maxSuggestions?: ComponentToMaxSuggestionsResolver<TParent>;
  media?: ComponentToMediaResolver<TParent>;
  minCharactersBeforeRequest?: ComponentToMinCharactersBeforeRequestResolver<TParent>;
  modifiedtime?: ComponentToModifiedtimeResolver<TParent>;
  numberOfItems?: ComponentToNumberOfItemsResolver<TParent>;
  showLanguageCurrency?: ComponentToShowLanguageCurrencyResolver<TParent>;
  shownProductCount?: ComponentToShownProductCountResolver<TParent>;
  sortByField?: ComponentToSortByFieldResolver<TParent>;
  title?: ComponentToTitleResolver<TParent>;
  totalDisplay?: ComponentToTotalDisplayResolver<TParent>;
  urlLink?: ComponentToUrlLinkResolver<TParent>;
  uuid?: ComponentToUuidResolver<TParent>;
  waitTimeBeforeRequest?: ComponentToWaitTimeBeforeRequestResolver<TParent>;
  wrapAfter?: ComponentToWrapAfterResolver<TParent>;
  image?: ComponentToImageResolver<TParent>;
  text?: ComponentToTextResolver<TParent>;
  url?: ComponentToUrlResolver<TParent>;
  products?: ComponentToProductsResolver<TParent>;
}

export interface ComponentToUidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ComponentToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ComponentToContainerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ComponentToTypeCodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ComponentToSequenceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ComponentToComponentsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ComponentToCategoryCodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ComponentToBannersResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ComponentToContentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ComponentToDisplayProductImagesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ComponentToDisplayProductsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ComponentToDisplaySuggestionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ComponentToExternalResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ComponentToFlexTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ComponentToHtmlClassResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ComponentToItemsNumberResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ComponentToMaxProductsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ComponentToMaxSuggestionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ComponentToMediaResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ComponentToMinCharactersBeforeRequestResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ComponentToModifiedtimeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ComponentToNumberOfItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ComponentToShowLanguageCurrencyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ComponentToShownProductCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ComponentToSortByFieldResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ComponentToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ComponentToTotalDisplayResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ComponentToUrlLinkResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ComponentToUuidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ComponentToWaitTimeBeforeRequestResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ComponentToWrapAfterResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ComponentToImageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ComponentToTextResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ComponentToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ComponentToProductsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCMSMediaTypeResolver<TParent = any> {
  code?: CMSMediaToCodeResolver<TParent>;
  mime?: CMSMediaToMimeResolver<TParent>;
  url?: CMSMediaToUrlResolver<TParent>;
  altText?: CMSMediaToAltTextResolver<TParent>;
  downloadUrl?: CMSMediaToDownloadUrlResolver<TParent>;
  widescreen?: CMSMediaToWidescreenResolver<TParent>;
  mobile?: CMSMediaToMobileResolver<TParent>;
  desktop?: CMSMediaToDesktopResolver<TParent>;
  tablet?: CMSMediaToTabletResolver<TParent>;
  media?: CMSMediaToMediaResolver<TParent>;
}

export interface CMSMediaToCodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CMSMediaToMimeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CMSMediaToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CMSMediaToAltTextResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CMSMediaToDownloadUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CMSMediaToWidescreenResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CMSMediaToMobileResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CMSMediaToDesktopResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CMSMediaToTabletResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CMSMediaToMediaResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCMSProductTypeResolver<TParent = any> {
  title?: CMSProductToTitleResolver<TParent>;
  code?: CMSProductToCodeResolver<TParent>;
  url?: CMSProductToUrlResolver<TParent>;
  price?: CMSProductToPriceResolver<TParent>;
  media?: CMSProductToMediaResolver<TParent>;
}

export interface CMSProductToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CMSProductToCodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CMSProductToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CMSProductToPriceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CMSProductToMediaResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRoutingConfigTypeResolver<TParent = any> {
  pathRegex?: RoutingConfigToPathRegexResolver<TParent>;
  type?: RoutingConfigToTypeResolver<TParent>;
  layout?: RoutingConfigToLayoutResolver<TParent>;
  CMSPageType?: RoutingConfigToCMSPageTypeResolver<TParent>;
  CMSPageId?: RoutingConfigToCMSPageIdResolver<TParent>;
  CMSCode?: RoutingConfigToCMSCodeResolver<TParent>;
}

export interface RoutingConfigToPathRegexResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RoutingConfigToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RoutingConfigToLayoutResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RoutingConfigToCMSPageTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RoutingConfigToCMSPageIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RoutingConfigToCMSCodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLMutationTypeResolver<TParent = any> {
  setLocale?: MutationToSetLocaleResolver<TParent>;
  setShopCurrency?: MutationToSetShopCurrencyResolver<TParent>;
  setShopStore?: MutationToSetShopStoreResolver<TParent>;
  addToCart?: MutationToAddToCartResolver<TParent>;
  updateCartItem?: MutationToUpdateCartItemResolver<TParent>;
  removeCartItem?: MutationToRemoveCartItemResolver<TParent>;
  applyCoupon?: MutationToApplyCouponResolver<TParent>;
  cancelCoupon?: MutationToCancelCouponResolver<TParent>;
  signUp?: MutationToSignUpResolver<TParent>;
  signIn?: MutationToSignInResolver<TParent>;
  signOut?: MutationToSignOutResolver<TParent>;
  editCustomer?: MutationToEditCustomerResolver<TParent>;
  editAddress?: MutationToEditAddressResolver<TParent>;
  addAddress?: MutationToAddAddressResolver<TParent>;
  estimateShippingMethods?: MutationToEstimateShippingMethodsResolver<TParent>;
  removeCustomerAddress?: MutationToRemoveCustomerAddressResolver<TParent>;
  requestCustomerPasswordResetToken?: MutationToRequestCustomerPasswordResetTokenResolver<TParent>;
  changeCustomerPassword?: MutationToChangeCustomerPasswordResolver<TParent>;
  resetCustomerPassword?: MutationToResetCustomerPasswordResolver<TParent>;
  setShipping?: MutationToSetShippingResolver<TParent>;
  placeOrder?: MutationToPlaceOrderResolver<TParent>;
  customerSubmitContactUs?: MutationToCustomerSubmitContactUsResolver<TParent>;
  setGuestCheckoutEmail?: MutationToSetGuestCheckoutEmailResolver<TParent>;
}

export interface MutationToSetLocaleArgs {
  locale: string;
}
export interface MutationToSetLocaleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToSetLocaleArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToSetShopCurrencyArgs {
  currency: string;
}
export interface MutationToSetShopCurrencyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToSetShopCurrencyArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToSetShopStoreArgs {
  storeCode: string;
}
export interface MutationToSetShopStoreResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToSetShopStoreArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToAddToCartArgs {
  input: GQLAddToCartInput;
}
export interface MutationToAddToCartResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToAddToCartArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateCartItemArgs {
  input: GQLUpdateCartItemInput;
}
export interface MutationToUpdateCartItemResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateCartItemArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToRemoveCartItemArgs {
  input: GQLRemoveCartItemInput;
}
export interface MutationToRemoveCartItemResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToRemoveCartItemArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToApplyCouponArgs {
  input: GQLCouponInput;
}
export interface MutationToApplyCouponResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToApplyCouponArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToCancelCouponResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToSignUpArgs {
  input: GQLSignUp;
}
export interface MutationToSignUpResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToSignUpArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToSignInArgs {
  input: GQLSignIn;
}
export interface MutationToSignInResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToSignInArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToSignOutResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToEditCustomerArgs {
  input: GQLCustomerInput;
}
export interface MutationToEditCustomerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToEditCustomerArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToEditAddressArgs {
  input: GQLEditAddressInput;
}
export interface MutationToEditAddressResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToEditAddressArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToAddAddressArgs {
  input: GQLAddAddressInput;
}
export interface MutationToAddAddressResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToAddAddressArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToEstimateShippingMethodsArgs {
  input: GQLEstimateShippingInput;
}
export interface MutationToEstimateShippingMethodsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToEstimateShippingMethodsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToRemoveCustomerAddressArgs {
  id: string;
}
export interface MutationToRemoveCustomerAddressResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToRemoveCustomerAddressArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToRequestCustomerPasswordResetTokenArgs {
  input: GQLEmailInput;
}
export interface MutationToRequestCustomerPasswordResetTokenResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToRequestCustomerPasswordResetTokenArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToChangeCustomerPasswordArgs {
  input: GQLCustomerPassword;
}
export interface MutationToChangeCustomerPasswordResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToChangeCustomerPasswordArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToResetCustomerPasswordArgs {
  input: GQLCustomerPasswordReset;
}
export interface MutationToResetCustomerPasswordResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToResetCustomerPasswordArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToSetShippingArgs {
  input?: GQLShippingInput;
}
export interface MutationToSetShippingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToSetShippingArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToPlaceOrderArgs {
  input: GQLPlaceOrderInput;
}
export interface MutationToPlaceOrderResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToPlaceOrderArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToCustomerSubmitContactUsArgs {
  input: GQLContactUsInput;
}
export interface MutationToCustomerSubmitContactUsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCustomerSubmitContactUsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToSetGuestCheckoutEmailArgs {
  input?: GQLGuestCheckoutEmailInput;
}
export interface MutationToSetGuestCheckoutEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToSetGuestCheckoutEmailArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCartItemPayloadTypeResolver<TParent = any> {
  itemId?: CartItemPayloadToItemIdResolver<TParent>;
  sku?: CartItemPayloadToSkuResolver<TParent>;
  qty?: CartItemPayloadToQtyResolver<TParent>;
  name?: CartItemPayloadToNameResolver<TParent>;
  price?: CartItemPayloadToPriceResolver<TParent>;
  productType?: CartItemPayloadToProductTypeResolver<TParent>;
}

export interface CartItemPayloadToItemIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CartItemPayloadToSkuResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CartItemPayloadToQtyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CartItemPayloadToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CartItemPayloadToPriceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CartItemPayloadToProductTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRemoveCartItemResponseTypeResolver<TParent = any> {
  itemId?: RemoveCartItemResponseToItemIdResolver<TParent>;
}

export interface RemoveCartItemResponseToItemIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLShippingInformationTypeResolver<TParent = any> {
  paymentMethods?: ShippingInformationToPaymentMethodsResolver<TParent>;
  totals?: ShippingInformationToTotalsResolver<TParent>;
}

export interface ShippingInformationToPaymentMethodsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ShippingInformationToTotalsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPlaceOrderResultTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'PlaceOrderSuccessfulResult' | 'PlaceOrder3dSecureResult';
}
export interface GQLPlaceOrderSuccessfulResultTypeResolver<TParent = any> {
  orderId?: PlaceOrderSuccessfulResultToOrderIdResolver<TParent>;
  orderRealId?: PlaceOrderSuccessfulResultToOrderRealIdResolver<TParent>;
}

export interface PlaceOrderSuccessfulResultToOrderIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PlaceOrderSuccessfulResultToOrderRealIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPlaceOrder3dSecureResultTypeResolver<TParent = any> {
  url?: PlaceOrder3dSecureResultToUrlResolver<TParent>;
  method?: PlaceOrder3dSecureResultToMethodResolver<TParent>;
  fields?: PlaceOrder3dSecureResultToFieldsResolver<TParent>;
}

export interface PlaceOrder3dSecureResultToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PlaceOrder3dSecureResultToMethodResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PlaceOrder3dSecureResultToFieldsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPlaceOrder3dSecureFieldTypeResolver<TParent = any> {
  name?: PlaceOrder3dSecureFieldToNameResolver<TParent>;
  value?: PlaceOrder3dSecureFieldToValueResolver<TParent>;
}

export interface PlaceOrder3dSecureFieldToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PlaceOrder3dSecureFieldToValueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLComponentsObjTypeResolver<TParent = any> {
  component?: ComponentsObjToComponentResolver<TParent>;
}

export interface ComponentsObjToComponentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLContentSlotObjTypeResolver<TParent = any> {
  contentSlot?: ContentSlotObjToContentSlotResolver<TParent>;
}

export interface ContentSlotObjToContentSlotResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
